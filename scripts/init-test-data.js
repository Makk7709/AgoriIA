const { createClient } = require('@supabase/supabase-js')

const supabase = createClient(
  'https://exbzpsrzfknmcdrhjwrs.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImV4Ynpwc3J6ZmtubWNkcmhqd3JzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDUzNDkyNzQsImV4cCI6MjA2MDkyNTI3NH0.VX9TmgdJIZeeoFY0cE5XZeMjxTga1Rvx5bMd4dl-5DM'
)

async function initTestData() {
  console.log('üöÄ Initialisation des donn√©es de test...')

  // 1. Supprimer les donn√©es existantes
  console.log('\nüìã √âtape 1: Suppression des donn√©es existantes')
  const { error: deleteCpError } = await supabase
    .from('candidate_positions')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000')

  if (deleteCpError) {
    console.error('‚ùå Erreur lors de la suppression des relations:', deleteCpError)
    return false
  }

  const { error: deletePositionsError } = await supabase
    .from('positions')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000')

  if (deletePositionsError) {
    console.error('‚ùå Erreur lors de la suppression des positions:', deletePositionsError)
    return false
  }

  const { error: deleteCandidatesError } = await supabase
    .from('candidates')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000')

  if (deleteCandidatesError) {
    console.error('‚ùå Erreur lors de la suppression des candidats:', deleteCandidatesError)
    return false
  }

  const { error: deleteThemesError } = await supabase
    .from('themes')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000')

  if (deleteThemesError) {
    console.error('‚ùå Erreur lors de la suppression des th√®mes:', deleteThemesError)
    return false
  }

  console.log('‚úÖ Donn√©es existantes supprim√©es avec succ√®s')

  // 2. Ins√©rer les th√®mes
  console.log('\nüìã √âtape 2: Insertion des th√®mes')
  const themes = [
    { id: 'economy', name: '√âconomie', description: 'Politiques √©conomiques et fiscales' },
    { id: 'ecology', name: '√âcologie', description: 'Environnement et transition √©cologique' },
    { id: 'security', name: 'S√©curit√©', description: 'S√©curit√© int√©rieure et d√©fense' },
    { id: 'education', name: '√âducation', description: 'Syst√®me √©ducatif et formation' },
    { id: 'health', name: 'Sant√©', description: 'Syst√®me de sant√© et protection sociale' },
    { id: 'europe', name: 'Europe', description: 'Relations europ√©ennes et internationales' },
    { id: 'institutions', name: 'Institutions', description: 'R√©forme des institutions et d√©mocratie' },
    { id: 'social', name: 'Social', description: 'Politiques sociales et solidarit√©' }
  ]

  const { error: themesError } = await supabase
    .from('themes')
    .insert(themes)

  if (themesError) {
    console.error('‚ùå Erreur lors de l\'insertion des th√®mes:', themesError)
    return false
  }
  console.log('‚úÖ Th√®mes ins√©r√©s avec succ√®s')

  // 3. Ins√©rer les candidats
  console.log('\nüìã √âtape 3: Insertion des candidats')
  const candidates = [
    { name: 'Jean Dupont', party: 'Parti A' },
    { name: 'Marie Martin', party: 'Parti B' },
    { name: 'Pierre Durand', party: 'Parti C' }
  ]

  const { data: insertedCandidates, error: candidatesError } = await supabase
    .from('candidates')
    .insert(candidates)
    .select()

  if (candidatesError) {
    console.error('‚ùå Erreur lors de l\'insertion des candidats:', candidatesError)
    return false
  }
  console.log('‚úÖ Candidats ins√©r√©s avec succ√®s')

  // 4. Ins√©rer les positions
  console.log('\nüìã √âtape 4: Insertion des positions')
  const positions = [
    {
      theme_id: 'economy',
      title: 'R√©duction des imp√¥ts',
      description: 'Nous proposons une r√©duction progressive de l\'imp√¥t sur les soci√©t√©s de 33% √† 25% sur 5 ans.',
      source_url: 'https://example.com/source1'
    },
    {
      theme_id: 'ecology',
      title: 'Transition √©cologique',
      description: 'Notre objectif est d\'atteindre la neutralit√© carbone d\'ici 2050.',
      source_url: 'https://example.com/source2'
    },
    {
      theme_id: 'security',
      title: 'Renforcement de la s√©curit√©',
      description: 'Nous augmenterons les effectifs de police de 10 000 agents.',
      source_url: 'https://example.com/source3'
    }
  ]

  const { data: insertedPositions, error: positionsError } = await supabase
    .from('positions')
    .insert(positions)
    .select()

  if (positionsError) {
    console.error('‚ùå Erreur lors de l\'insertion des positions:', positionsError)
    return false
  }
  console.log('‚úÖ Positions ins√©r√©es avec succ√®s')

  // 5. Lier les candidats aux positions
  console.log('\nüìã √âtape 5: Liaison des candidats aux positions')
  const candidatePositions = []
  insertedPositions.forEach(position => {
    insertedCandidates.forEach(candidate => {
      candidatePositions.push({
        position_id: position.id,
        candidate_id: candidate.id,
        position: candidate.name === 'Jean Dupont' ? 'agree' : candidate.name === 'Marie Martin' ? 'disagree' : 'neutral',
        explanation: `Explication de la position de ${candidate.name} sur ${position.title}`
      })
    })
  })

  const { error: cpError } = await supabase
    .from('candidate_positions')
    .insert(candidatePositions)

  if (cpError) {
    console.error('‚ùå Erreur lors de la liaison des candidats aux positions:', cpError)
    return false
  }
  console.log('‚úÖ Candidats li√©s aux positions avec succ√®s')

  console.log('\n‚ú® Initialisation des donn√©es de test termin√©e avec succ√®s!')
  return true
}

// Ex√©cuter l'initialisation
initTestData().then(success => {
  if (!success) {
    console.error('\n‚ùå L\'initialisation a √©chou√©')
    process.exit(1)
  }
}) 